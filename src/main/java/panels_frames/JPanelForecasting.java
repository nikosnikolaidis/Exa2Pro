/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels_frames;

import exa2pro.Exa2Pro;
import exa2pro.Project;
import exa2pro.Report;
import java.awt.BasicStroke;
import java.awt.Color;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.BubbleXYItemLabelGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.XYZDataset;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author Nikos
 */
public class JPanelForecasting extends javax.swing.JPanel {

    Project project;
    HashMap<Integer,Double> pastVersionValues= new HashMap<>();
    HashMap<Integer,Double> newVersionValues= new HashMap<>();
    
    ArrayList<String> fileNames= new ArrayList<>();
    ArrayList<Double> changeProneness= new ArrayList<>();
    ArrayList<Double> expectedComplexityChange= new ArrayList<>();
    ArrayList<Double> forecastingFile= new ArrayList<>();
    
    /**
     * Creates new form JPanelMetrics
     */
    public JPanelForecasting(Project project) {
        this.project= project;
        initComponents();
        
        jPanelFiles.setVisible(false);
        getFromDBProject(10);
        createAndAdd(false);
        
        jSliderHorizon.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                jLabelHorizon.setText(jSliderHorizon.getValue()+"");
            }
        });
        
        jSliderFiles.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                jLabelFiles.setText(jSliderFiles.getValue()+"");
            }
        });
    }

    private void createAndAdd(boolean bubble) {
        JPanel p;
        if(!bubble){
            p= createChartPanel();
            jLabelHorizon.setText(jSliderHorizon.getValue()+"");
        }
        else{
            p= createBubblePanel();
            jLabelFiles.setText(jSliderFiles.getValue()+"");
        }
        javax.swing.GroupLayout jPanelChartLayout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanelChartLayout);
        jPanelChartLayout.setHorizontalGroup(
                jPanelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelChartLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(p, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                                .addGap(2, 2, 2))
        );
        jPanelChartLayout.setVerticalGroup(
                jPanelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelChartLayout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addComponent(p, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                                .addGap(2, 2, 2))
        );
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelParent = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanelHorizon = new javax.swing.JPanel();
        jSliderHorizon = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabelHorizon = new javax.swing.JLabel();
        jPanelFiles = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabelFiles = new javax.swing.JLabel();
        jSliderFiles = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jSliderHorizon.setMajorTickSpacing(5);
        jSliderHorizon.setMinimum(1);
        jSliderHorizon.setPaintTicks(true);
        jSliderHorizon.setValue(10);
        jSliderHorizon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderHorizonMouseReleased(evt);
            }
        });

        jLabel1.setText("Horizon:");

        jLabelHorizon.setText("10");

        javax.swing.GroupLayout jPanelHorizonLayout = new javax.swing.GroupLayout(jPanelHorizon);
        jPanelHorizon.setLayout(jPanelHorizonLayout);
        jPanelHorizonLayout.setHorizontalGroup(
            jPanelHorizonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHorizonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(jLabelHorizon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSliderHorizon, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelHorizonLayout.setVerticalGroup(
            jPanelHorizonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSliderHorizon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanelHorizonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jLabelHorizon, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.add(jPanelHorizon);

        jPanelFiles.setEnabled(false);

        jLabel2.setText("Files:");

        jLabelFiles.setText("0");

        jSliderFiles.setMajorTickSpacing(5);
        jSliderFiles.setMinimum(1);
        jSliderFiles.setPaintTicks(true);
        jSliderFiles.setValue(10);
        jSliderFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderFilesMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanelFilesLayout = new javax.swing.GroupLayout(jPanelFiles);
        jPanelFiles.setLayout(jPanelFilesLayout);
        jPanelFilesLayout.setHorizontalGroup(
            jPanelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilesLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSliderFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelFilesLayout.setVerticalGroup(
            jPanelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilesLayout.createSequentialGroup()
                .addComponent(jSliderFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFilesLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        jPanel2.add(jPanelFiles);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 409, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelParentLayout = new javax.swing.GroupLayout(jPanelParent);
        jPanelParent.setLayout(jPanelParentLayout);
        jPanelParentLayout.setHorizontalGroup(
            jPanelParentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE)
        );
        jPanelParentLayout.setVerticalGroup(
            jPanelParentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParentLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setText("Files/Modules");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelParent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelParent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSliderHorizonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderHorizonMouseReleased
        if(jButton1.getText().equals("Files/Modules")){
            pastVersionValues.clear();
            newVersionValues.clear();
            jPanel1.removeAll();

            getFromDBProject(jSliderHorizon.getValue());
            createAndAdd(false);
        }
        else{
            fileNames.clear();
            changeProneness.clear();
            expectedComplexityChange.clear();
            forecastingFile.clear();
            jPanel1.removeAll();
            
            getFromDBFiles(jSliderHorizon.getValue(), jSliderFiles.getValue());
            createAndAdd(true);
        }
	repaint();
    }//GEN-LAST:event_jSliderHorizonMouseReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(jButton1.getText().equals("Files/Modules")){
            jButton1.setText("Project");
            jPanel1.removeAll();
            
            //create bubble plot
            jPanelFiles.setVisible(true);
            jSliderHorizon.setValue(10);
            jLabelHorizon.setText("10");
            jSliderFiles.setValue(10);
            jLabelFiles.setText("10");
            getFromDBFiles(jSliderHorizon.getValue(),jSliderFiles.getValue());
            createAndAdd(true);
            repaint();
        }
        else{
            jButton1.setText("Files/Modules");
            jPanel1.removeAll();
            
            //create chart
            jPanelFiles.setVisible(false);
            jSliderHorizon.setValue(10);
            jLabelHorizon.setText("10");
            getFromDBProject(jSliderHorizon.getValue());
            createAndAdd(false);
            repaint();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jSliderFilesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderFilesMouseReleased
        fileNames.clear();
        changeProneness.clear();
        expectedComplexityChange.clear();
        forecastingFile.clear();
        jPanel1.removeAll();
        
        getFromDBFiles(jSliderHorizon.getValue(), jSliderFiles.getValue());
        createAndAdd(true);
	repaint();
    }//GEN-LAST:event_jSliderFilesMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelFiles;
    private javax.swing.JLabel jLabelHorizon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelFiles;
    private javax.swing.JPanel jPanelHorizon;
    private javax.swing.JPanel jPanelParent;
    private javax.swing.JSlider jSliderFiles;
    private javax.swing.JSlider jSliderHorizon;
    // End of variables declaration//GEN-END:variables

    private void getFromDBProject(int horizon) {
        try {
            URL url = new URL("http://160.40.52.130:5001/TDForecaster/SystemForecasting?horizon="+ horizon
                    + "&project=metalwalls_measures&regressor=ridge&ground_truth=yes");
            HttpURLConnection conn = (HttpURLConnection)url.openConnection();
            conn.setRequestMethod("GET");
            conn.connect();
            int responsecode = conn.getResponseCode();
            if(responsecode != 200) {
            	System.err.println("http://160.40.52.130:5001/TDForecaster/SystemForecasting?horizon="+ horizon
                    + "&project=metalwalls_measures&regressor=ridge&ground_truth=yes");
            }
            else{
                Scanner sc = new Scanner(url.openStream());
                String inline="";
                while(sc.hasNext()){
                    inline+=sc.nextLine();
                }
                sc.close();
                JSONParser parse = new JSONParser();
                JSONObject jobj = (JSONObject)parse.parse(inline);
                
                //forecasting values
                JSONObject jobj2= (JSONObject) jobj.get("results");
                JSONArray jsonarr_2 = (JSONArray) jobj2.get("forecasts");
                for(int i=0; i<jsonarr_2.size(); i++){
                    JSONObject jsonobj_2 = (JSONObject)jsonarr_2.get(i);
                    newVersionValues.put( Integer.parseInt(jsonobj_2.get("version").toString()),
                                Double.parseDouble(jsonobj_2.get("value").toString()) );
                }
                
                //past values
                JSONObject jobj1= (JSONObject) jobj.get("results");
                JSONArray jsonarr_1 = (JSONArray) jobj1.get("ground_truth");
                for(int i=0; i<jsonarr_1.size(); i++){
                    JSONObject jsonobj_1 = (JSONObject)jsonarr_1.get(i);
                    pastVersionValues.put( Integer.parseInt(jsonobj_1.get("version").toString()),
                                Double.parseDouble(jsonobj_1.get("value").toString()) );
                }
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(Report.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ParseException ex) {
            Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private JPanel createChartPanel() {
        String chartTitle = "Forecasting";
        String xAxisLabel = "version";
        String yAxisLabel = "TD";

        XYDataset dataset = createDataset();

        JFreeChart chart = ChartFactory.createXYLineChart(chartTitle, 
                xAxisLabel, yAxisLabel, dataset);

        customizeChart(chart);

        return new ChartPanel(chart);
    }

    private XYDataset createDataset() {    // this method creates the data as time seris 
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSeries series1 = new XYSeries("Past");
        XYSeries series2 = new XYSeries("Forecasting");
        
        for(int key: pastVersionValues.keySet()){
            series1.add(key, pastVersionValues.get(key));
        }
        
        for(int key: newVersionValues.keySet()){
            series2.add(key, newVersionValues.get(key));
        }
        
        dataset.addSeries(series1);
        dataset.addSeries(series2);
        
        return dataset;
    }

    private void customizeChart(JFreeChart chart) {   // here we make some customization
        XYPlot plot = chart.getXYPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();

        // sets paint color for each series
        renderer.setSeriesPaint(0, Color.RED);
        renderer.setSeriesPaint(1, Color.GREEN);

        // sets thickness for series (using strokes)
        renderer.setSeriesStroke(0, new BasicStroke(4.0f));
        renderer.setSeriesStroke(1, new BasicStroke(3.0f));

        // sets paint color for plot outlines
        plot.setOutlinePaint(Color.BLUE);
        plot.setOutlineStroke(new BasicStroke(2.0f));

        // sets renderer for lines
        plot.setRenderer(renderer);

        // sets plot background
        plot.setBackgroundPaint(Color.DARK_GRAY);

        // sets paint color for the grid lines
        plot.setRangeGridlinesVisible(true);
        plot.setRangeGridlinePaint(Color.BLACK);

        plot.setDomainGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.BLACK);

    }

    
    private JPanel createBubblePanel() {
        JFreeChart jfreechart = ChartFactory.createBubbleChart(
            "Files/Modules",
            "Expected Complexity Change",
            "Change Proneness",
            createDatasetBubble(),
            PlotOrientation.HORIZONTAL,
            true, true, false);
         
        XYPlot xyplot = ( XYPlot )jfreechart.getPlot( );                 
        xyplot.setForegroundAlpha( 0.65F );                 
        XYItemRenderer xyitemrenderer = xyplot.getRenderer( );
        xyitemrenderer.setSeriesPaint( 0 , Color.blue );                 
        NumberAxis numberaxis = ( NumberAxis )xyplot.getDomainAxis( );                 
        numberaxis.setLowerMargin( 0.2 );                 
        numberaxis.setUpperMargin( 0.5 );                 
        NumberAxis numberaxis1 = ( NumberAxis )xyplot.getRangeAxis( );                 
        numberaxis1.setLowerMargin( 0.8 );                 
        numberaxis1.setUpperMargin( 0.9 );
        
        XYBubbleRenderer renderer=(XYBubbleRenderer)xyplot.getRenderer();
        BubbleXYItemLabelGenerator generator=new BubbleXYItemLabelGenerator("{0}",
                new DecimalFormat("0"), new DecimalFormat("0"), new DecimalFormat("0"));
        renderer.setDefaultItemLabelGenerator(generator);
        renderer.setDefaultItemLabelsVisible(true);
        
        
        ChartPanel chartpanel = new ChartPanel( jfreechart );
        chartpanel.setDomainZoomable( true );                 
        chartpanel.setRangeZoomable( true );
        return chartpanel;
    }

    private XYZDataset createDatasetBubble() {
        //normalize diameter
    	double max= forecastingFile.get(0);
    	double min= forecastingFile.get(0);
    	for(Double d:forecastingFile) {
    		if(d>max)
    			max=d;
    		if(d<min)
    			min=d;
    	}
    	for(int i=0; i<forecastingFile.size(); i++) {
    		double value= forecastingFile.get(i);
    		forecastingFile.set(i, (0.02-0.002)/(max-min)*(value-min)+0.002);
    	}
        
        //create dataset
        DefaultXYZDataset defaultxyzdataset = new DefaultXYZDataset();
        for(int i=0; i<changeProneness.size(); i++){
        	defaultxyzdataset.addSeries(fileNames.get(i), new double[][] {
        		{expectedComplexityChange.get(i)},
        		{changeProneness.get(i)},
        		{forecastingFile.get(i)}
        	});
        }

        return defaultxyzdataset;
    }
    
    private void getFromDBFiles(int horizon, int files){
        try {
            URL url = new URL("http://160.40.52.130:5001/TDForecaster/FileForecasting?horizon="+ horizon
                    +"&project=metalwalls_measures&project_files="+ files +"&regressor=lasso&ground_truth=no");
            HttpURLConnection conn = (HttpURLConnection)url.openConnection();
            conn.setRequestMethod("GET");
            conn.connect();
            int responsecode = conn.getResponseCode();
            if(responsecode != 200) {
            	System.err.println("http://160.40.52.130:5001/TDForecaster/FileForecasting?horizon="+ horizon
                    +"&project=metalwalls_measures&project_files="+ files +"&regressor=lasso&ground_truth=no");
            }
            else{
                Scanner sc = new Scanner(url.openStream());
                String inline="";
                while(sc.hasNext()){
                    inline+=sc.nextLine();
                }
                sc.close();
                JSONParser parse = new JSONParser();
                JSONObject jobj = (JSONObject)parse.parse(inline);
                
                //metrics
                JSONObject jobj2= (JSONObject) jobj.get("results");
                JSONArray jsonarr_2 = (JSONArray) jobj2.get("change_metrics");
                for(int i=0; i<jsonarr_2.size(); i++){
                    JSONObject jsonobj_2 = (JSONObject)jsonarr_2.get(i);
                    String name= (String)jsonobj_2.keySet().iterator().next();
                    fileNames.add(name);
                    JSONObject jsonobj_3= (JSONObject) jsonobj_2.get(name);
                    changeProneness.add( Double.parseDouble(jsonobj_3.get("change_proneness_(CP)").toString()) );
                    expectedComplexityChange.add( Double.parseDouble(
                                jsonobj_3.get("expected_complexity_change_(ED-COMP)").toString()) );
                }
                
                //forecasting
                JSONArray jsonarr_1 = (JSONArray) jobj2.get("forecasts");
                for(int i=0; i<jsonarr_1.size(); i++){
                    JSONObject jsonobj_1 = (JSONObject)jsonarr_1.get(i);
                    JSONArray jsonarr_3= (JSONArray) jsonobj_1.get((String)jsonobj_1.keySet().iterator().next());
                    JSONObject jsonobj_2= (JSONObject)jsonarr_3.get(jsonarr_3.size()-1);
                    forecastingFile.add( Double.parseDouble(jsonobj_2.get("value").toString()) );
                }
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(Report.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ParseException ex) {
            Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
